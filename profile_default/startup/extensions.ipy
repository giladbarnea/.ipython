import sys
# __dark = lambda *strings: print(f'\x1b[2m{", ".join(map(str, strings))}\x1b[0m')
# __dark = lambda *args, **kwargs: None
# __loaded = []

try:
    %load_ext autoreload
    %autoreload 3
except ModuleNotFoundError as e:
    print(f'Failed loading extension autoreload: {e}', file=sys.stderr)

try:
    %load_ext ipython_autoimport
except ModuleNotFoundError as e:
    print(f'Failed loading extension ipython_autoimport: {e}', file=sys.stderr)

try:
    %load_ext rich
except ModuleNotFoundError as e:
    print(f'Failed loading extension rich: {e}', file=sys.stderr)

try:
    %autocall 1
except Exception as e:
    print(f'Failed %autocall 1. {type(e).__qualname__}: {e}', file=sys.stderr)

# try:
#     %load_ext line_profiler
#     __loaded.append('line_profiler')
# except ModuleNotFoundError as e:
#     __dark(f'\tfailed loading extension line_profiler', e.__class__.__qualname__, e)


# try:
#     %load_ext ipython_cells
#     __loaded.append('ipython_cells')
# except ModuleNotFoundError as e:
#     __dark(f'\tfailed loading extension ipython_cells', e.__class__.__qualname__, e)

# __dark(f'extensions: {", ".join(__loaded)}')
# del __dark, __loaded
